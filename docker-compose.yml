version: "3.9"

# 游녢 Perfis:
# - prod: nginx-proxy + acme-companion + app (HTTPS autom치tico)
# - dev:  app-dev local (porta 5000), montando o c칩digo
# - extras: Redis para RATE_LIMIT (opcional)

services:
  # =========================
  # Reverse proxy + Let's Encrypt (produ칞칚o)
  # =========================
  reverse-proxy:
    image: nginxproxy/nginx-proxy:alpine
    container_name: reverse-proxy
    profiles: ["prod"]
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./data/certs:/etc/nginx/certs:rw
      - ./data/vhost.d:/etc/nginx/vhost.d
      - ./data/html:/usr/share/nginx/html
      - /var/run/docker.sock:/tmp/docker.sock:ro
    networks: [proxy]
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 80 || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 5

  acme-companion:
    image: nginxproxy/acme-companion
    container_name: acme-companion
    profiles: ["prod"]
    restart: unless-stopped
    environment:
      - DEFAULT_EMAIL=${LETSENCRYPT_EMAIL}
    volumes:
      - ./data/certs:/etc/nginx/certs:rw
      - ./data/vhost.d:/etc/nginx/vhost.d
      - ./data/html:/usr/share/nginx/html
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
      reverse-proxy:
        condition: service_started
    networks: [proxy]

  # =========================
  # App (produ칞칚o)
  # =========================
  app:
    build: .
    image: meu-app:latest
    container_name: legal-assistant-app
    profiles: ["prod"]
    restart: unless-stopped
    env_file: .env
    environment:
      PORT: 5000
      APP_DB_PATH: /app/data/app.db
      # Reverse-proxy (nginx-proxy) -> ler do .env
      VIRTUAL_HOST: ${DOMAIN}
      VIRTUAL_PORT: 5000
      LETSENCRYPT_HOST: ${DOMAIN}
      LETSENCRYPT_EMAIL: ${LETSENCRYPT_EMAIL}
      # Rate limit storage (fallback mem칩ria se Redis n칚o habilitado)
      RATELIMIT_STORAGE_URI: ${RATELIMIT_STORAGE_URI:-memory://}
    volumes:
      - ./data:/app/data
      - ./index:/app/index
      - ./data/pdfs:/app/data/pdfs
    networks: [proxy, backend]
    depends_on:
      reverse-proxy:
        condition: service_started
      redis:
        condition: service_started
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://127.0.0.1:5000/health | grep -q '\"status\"'"]
      interval: 30s
      timeout: 5s
      retries: 3

  # =========================
  # App (desenvolvimento)
  # =========================
  app-dev:
    build:
      context: .
      target: runtime    # usa o est치gio 'runtime' do Dockerfile multi-stage
    image: meu-app:dev
    container_name: legal-assistant-app-dev
    profiles: ["dev"]
    restart: unless-stopped
    env_file: .env
    environment:
      PORT: 5000
      APP_DB_PATH: /app/data/app.db
      # Use Redis local do compose se perfil 'extras' estiver ativo
      RATELIMIT_STORAGE_URI: ${RATELIMIT_STORAGE_URI:-memory://}
    command: python server.py
    ports:
      - "5000:5000"
    volumes:
      - .:/app:delegated
      - ./data:/app/data
      - ./index:/app/index
      - ./data/pdfs:/app/data/pdfs
    networks: [backend]
    depends_on:
      redis:
        condition: service_started
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://127.0.0.1:5000/health | grep -q '\"status\"'"]
      interval: 10s
      timeout: 5s
      retries: 3

  # =========================
  # Redis (opcional p/ rate limiting)
  # =========================
  redis:
    image: redis:7-alpine
    container_name: limiter-redis
    profiles: ["extras"]
    command: ["redis-server", "--save", "", "--appendonly", "no"]
    networks: [backend]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 10

networks:
  proxy:
    external: false
  backend:
    external: false
